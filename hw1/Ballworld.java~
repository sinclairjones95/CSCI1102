/*
  Ballworld
 
  A simple animation program which displays a set of bouncing balls.
  author: John Donaldson
  Edited by: Richard Jones
*/

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;

public class Ballworld extends JFrame // appears in a GUI window
   implements ActionListener { // responds to Timer events

   // program variables
   private ArrayList<Ball> ballList = new ArrayList<Ball>();
   private javax.swing.Timer timer= new javax.swing.Timer(50,this);
   private JPanel drawingPanel;
   
   // respond to timer events
   public void actionPerformed(ActionEvent e){
      drawingPanel.repaint();
      handleCollisions();
   }

   // constructor
   // sets up the GUI frame and then exits
   Ballworld() 
   {
      // Set the frame attributes
      setSize(1400,700);
      setLocation(50,50);
      setTitle("Ballworld");
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    
      
      // Get a reference to the frame's content pane
      Container contentPane = getContentPane();

      // Set up the GUI components within the frame
      JPanel buttonPanel = new JPanel(); // a panel for buttons at the bottom
      contentPane.add("South",buttonPanel); 
      
      // three buttons in the button panel
      JButton addButton = new JButton("Add Ball");
      buttonPanel.add(addButton);
       
      JButton addCBButton = new JButton("Add CurveBall"); //new botton - curveball
      buttonPanel.add(addCBButton);
      
      JButton addBreathButton = new JButton("Add BreathingBall"); //new botton - breathing ball
      buttonPanel.add(addBreathButton);
      
      JButton addBlinkButton = new JButton("Add BlinkingBall"); //new botton - blinking ball
      buttonPanel.add(addBlinkButton);
      
      JButton addSpeedingButton = new JButton("Add SpeedingBall"); //new botton - speeding ball
      buttonPanel.add(addSpeedingButton);
      
      JButton addRotateButton = new JButton("Add RotateBall"); //new botton - Rotating ball
      buttonPanel.add(addRotateButton);
      
      JButton addChangeButton = new JButton("Add GrowingBall"); //new botton - Changing ball
      buttonPanel.add(addChangeButton);
            
      JButton clearButton = new JButton("Delete all Balls");
      buttonPanel.add(clearButton);
      
      JButton closeButton = new JButton("Close Window");
      buttonPanel.add(closeButton);

      // the drawing panel
      drawingPanel = new JPanel(){
         // this method describes how to draw the panel
         public void paintComponent(Graphics g){
            super.paintComponent(g); // redraw the panel
            for(Ball b : ballList){ // redraw the balls
               b.draw(g);
            }
         }
      };
      drawingPanel.setBackground(Color.lightGray);
      contentPane.add("Center",drawingPanel);
      
      // Set up the action listeners for the buttons
      addCBButton.addActionListener(new ActionListener(){      //adding Curveball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball CBball = new CurveBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(CBball);
            // add it to the Ball list
            ballList.add(CBball);
         }
      });
      
      addButton.addActionListener(new ActionListener(){     //adding normal ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball ball = new Ball(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(ball);
            // add it to the Ball list
            ballList.add(ball);
         }
      });
      
      addBreathButton.addActionListener(new ActionListener(){       //adding a breathing ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball Breathball = new BreathingBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(Breathball);
            // add it to the Ball list
            ballList.add(Breathball);
         }
      });
      
      addBlinkButton.addActionListener(new ActionListener(){       //adding a blinking ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball Blinkball = new BlinkBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(Blinkball);
            // add it to the Ball list
            ballList.add(Blinkball);
         }
      });
      
       addSpeedingButton.addActionListener(new ActionListener(){       //adding a speeding ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball Speedingball = new SpeedingBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(Speedingball);
            // add it to the Ball list
            ballList.add(Speedingball);
         }
      });
       
       addRotateButton.addActionListener(new ActionListener(){       //adding a rotating ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball Rotateball = new RotateBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(Rotateball);
            // add it to the Ball list
            ballList.add(Rotateball);
         }
      });
       
       addChangeButton.addActionListener(new ActionListener(){       //adding a changing ball
         public void actionPerformed(ActionEvent e){
            // instantiate a Ball
            Ball ChangeBall = new ChangeBall(drawingPanel.getWidth(),drawingPanel.getHeight());
            // the ball responds to timer ticks
            timer.addActionListener(ChangeBall);
            // add it to the Ball list
            ballList.add(ChangeBall);
         }
      });
      
      clearButton.addActionListener(new ActionListener(){
         public void actionPerformed(ActionEvent e){
            ballList.clear();
         }
      });
      
      closeButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e){
            System.exit(0);
         }
      });
      
      setVisible(true); // make the frame visible on the screen
      timer.start();
   }

   // the main method
   public static void main(String args[])
   {
      // instantiate the frame
      new Ballworld();
   }


   void handleCollisions(){
     for(Ball b : ballList){      //check collisions for all balls
       
       for (Ball c: ballList){
         boolean intersect = b.intersect(c);
         if (intersect==true){
          b.collide(c);
         }
         else {
           continue;
         }
       }
     }
     
   }
     
   
}

